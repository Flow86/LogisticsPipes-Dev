<project name="LogisticsPipes" basedir="../" default="main">
	<property environment="env"/>

	<import file="../BuildCraft/build.xml" as="BuildCraft"/>

	<!-- Properties -->
	<property name="lp.dir"               value="LogisticsPipes-Dev"/>
	<property name="sign.dir"             value="/home/jenkins/.sign"/>

	<property name="lib.dir"              value="${build.dir}/lib"/>

	<property name="forestry.dir"         value="${mcp.dir}/unpack/forestry"/>
	<property name="ic2.dir"              value="${mcp.dir}/unpack/ic2"/>
	<property name="cc.dir"               value="${mcp.dir}/unpack/cc"/>
	<property name="thaumcraft.dir"       value="${mcp.dir}/unpack/thaumcraft"/>
	<property name="te.dir"               value="${mcp.dir}/unpack/te"/>

	<property name="clientlp.dir"         value="${mcp.dir}/src/minecraft"/>
	<property name="commonlp.dir"         value="${clientlp.dir}"/>
	
	<property name="downloadserver"       value="http://www.theZorro266.com"/>
	<property name="downloadserver.dir"   value="rs485/"/>
	<property name="downloadserver.full"  value="${downloadserver}/${downloadserver.dir}"/>

	<property name="antcont.version"        value="1.0b3"/>
	<property name="forestry.version"       value="2.1.2.17"/>
	<property name="ic2.version"            value="1.115.304-lf"/>
	<property name="cc.version"             value="1.52"/>
	<property name="thaumcraft.version.api" value="0.0.5"/>
	<property name="thaumcraft.version.mod" value="3.0.4b"/>
	<property name="te.version"             value="2.3.0"/>
	<property name="lp.version"             value="0.7.2"/>
	
	<!-- Targets -->
	<target name="init-msg">
		<echo message="Starting build for ${lp.version.full} for MC ${mc.version} for BC ${bc.version}"/>
	</target>
	
	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>
	
	<target name="copy-deps" depends="BuildCraft.copy-src">
		<mkdir dir="${download.dir}"/>

		<get src="${downloadserver.full}forestry-api-${forestry.version}.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}industrialcraft-2-api_${ic2.version}.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}ComputerCraftAPI${cc.version}.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}ThaumcraftApi-${thaumcraft.version.api}-for-${thaumcraft.version.mod}.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}ThermalExpansion-API-${te.version}.zip" dest="${download.dir}" usetimestamp="True"/>
		<get src="${downloadserver.full}ant-contrib-${antcont.version}-bin.zip" dest="${download.dir}" usetimestamp="True"/>

		<echo message="Download finished"/>

		<unzip dest="${lib.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="ant-contrib-${antcont.version}-bin.zip"/>
			</fileset>
		</unzip>

		<unzip dest="${forestry.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="forestry-api-${forestry.version}.zip"/>
			</fileset>
		</unzip>

		<unzip dest="${ic2.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="industrialcraft-2-api_${ic2.version}.zip"/>
			</fileset>
		</unzip>

		<unzip dest="${cc.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="ComputerCraftAPI${cc.version}.zip"/>
			</fileset>
		</unzip>

		<unzip dest="${thaumcraft.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="ThaumcraftApi-${thaumcraft.version.api}-for-${thaumcraft.version.mod}.zip"/>
			</fileset>
		</unzip>

		<unzip dest="${te.dir}" failOnEmptyArchive="true">
			<fileset dir="${download.dir}">
				<include name="ThermalExpansion-API-${te.version}.zip"/>
			</fileset>
		</unzip>

		<echo message="Unpacking finished"/>

		<!-- Copy Forestry API source -->
		<copy todir="${commonlp.dir}">
			<fileset dir="${forestry.dir}"/>
		</copy>

		<echo message="Copied Forestry API"/>

		<!-- Copy IC2 API source -->
		<copy todir="${commonlp.dir}">
			<fileset dir="${ic2.dir}"/>
		</copy>

		<echo message="Copied IC2 API"/>

		<!-- Copy CC API source -->
		<copy todir="${commonlp.dir}">
			<fileset dir="${cc.dir}"/>
		</copy>

		<echo message="Copied CC API"/>

		<!-- Copy ThaumCraft API source -->
		<copy todir="${commonlp.dir}">
			<fileset dir="${thaumcraft.dir}"/>
		</copy>

		<echo message="Copied ThaumCraft API"/>

		<!-- Copy TE API source -->
		<copy todir="${commonlp.dir}">
			<fileset dir="${te.dir}"/>
		</copy>

		<echo message="Copied TE API"/>

		<!-- Copy Dummy classes source -->
		<copy todir="${commonlp.dir}">
			<fileset dir="${lp.dir}/dummy"/>
		</copy>

		<echo message="Copied dummy files"/>
	</target>

	<target name="setup" depends="BuildCraft.initialize-version,BuildCraft.setup">
		<delete file="jenkins.properties" failonerror="false" />
		<propertyfile file="jenkins.properties">
			<entry key="LP_VERSION_FULL" value="${lp.version.full}" />
			<entry key="MC_VERSION" value="${mc.version}" />
			<entry key="BC_VERSION" value="${bc.version}" />
			<entry key="FORGE_VERSION" value="${forge.version}" />
		</propertyfile>
	</target>

	<target name="update-md5">
		<!-- Update MD5 otherwise we get all the buildcraft classes too :/ -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows" failonerror="true">
			<arg line="/c"/>
			<arg line="updatemd5.bat"/>
			<arg line="--force"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix" failonerror="true">
			<arg line="updatemd5.sh"/>
			<arg line="--force"/>
		</exec>

		<echo message="Regenerated MD5s"/>
	</target>

	<target name="copy-src" depends="copy-deps">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="${lib.dir}/ant-contrib/ant-contrib-${antcont.version}.jar"/>
			</classpath>
		</taskdef>
		<echo message="Loaded ant-contrib"/>

		<!-- Delete LP source in build space -->
		<delete dir="${commonlp.dir}/logisticspipes"/>

		<!-- Copy LP source -->
		<copy todir="${commonlp.dir}">
			<fileset dir="${lp.dir}/common"/>
		</copy>
		<replace file="${commonlp.dir}/logisticspipes/LogisticsPipes.java" token="%VERSION%" value="${lp.version.full}"/>
		<replace file="${commonlp.dir}/logisticspipes/LogisticsPipes.java" token="%MCVERSION%" value="${mc.version}"/>
		<replace file="${commonlp.dir}/logisticspipes/LogisticsPipes.java" token="%DEBUG%" value="${DEBUG}"/>
		
		<if>
			<available file="${sign.dir}/.fingerprint"/>
			<then>
				<echo message="Loading FingerPrint"/>
				<loadfile property="fingerprint" srcFile="${sign.dir}/.fingerprint"/>
				<replace file="${commonlp.dir}/logisticspipes/LogisticsPipes.java" token="%------------CERTIFICATE-SUM-----------%" value='*/ certificateFingerprint="${fingerprint}", /*'/>
			</then>
		</if>

		<!-- Create resources zip for MC in mcp -->
		<zip destfile="${mcp.dir}/jars/mods/LogisticsPipes_resources.zip" basedir="${lp.dir}/resources" excludes="mcmod.info"/>
		
	</target>

	<target name="compile" depends="update-md5,copy-src">

		<echo message="Compiling version ${lp.version.full}"/>

		<!-- Recompile -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows" failonerror="true">
			<arg line="/c recompile.bat --client"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix" failonerror="true">
			<arg value="recompile.sh"/>
		</exec>

		<!-- Reobf -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows" failonerror="true">
			<arg line="/c reobfuscate_srg.bat --client"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix" failonerror="true">
			<arg value="reobfuscate_srg.sh"/>
		</exec>

		<!-- Copy LP classes -->
		<copy todir="${classes.dir}/client">
			<fileset dir="${mcp.dir}/reobf/minecraft"/>
		</copy>

		<!-- Copy resoucres -->
		<copy todir="${classes.dir}/client">
			<fileset dir="${lp.dir}/resources"></fileset>
		</copy>

		<replace file="${classes.dir}/client/mcmod.info" token="%VERSION%" value="${lp.version.full}"/>

		<echo message="Compiling finished"/>
	</target>

	<target name="package-simple" depends="compile">
		<echo message="Packing version ${lp.version.full}"/>

		<jar destfile="${jar.dir}/LogisticsPipes-MC${mc.version}-${lp.version.full}.jar" basedir="${classes.dir}/client"/>

		<echo message="Packing finished"/>
	</target>

	<target name="package-sign" depends="compile">
		<echo message="Loading SignSettings"/>
		<loadfile property="key" srcFile="${sign.dir}/.key"/>

		<echo message="Packing version ${lp.version.full}"/>

		<jar destfile="${jar.dir}/LogisticsPipes-MC${mc.version}-${lp.version.full}.jar" basedir="${classes.dir}/client">
			<manifest>
				<attribute name="Built-By" value="RS485-Jenkins"/>
				<attribute name="Implementation-Vendor" value="RS485"/>
				<attribute name="Implementation-Title" value="LogisticsPipes"/>
				<attribute name="Implementation-Version" value="${lp.version.full}"/>
			</manifest>
		</jar>
		<signjar jar="${jar.dir}/LogisticsPipes-MC${mc.version}-${lp.version.full}.jar" alias="RS485" keystore="${sign.dir}/.keystore" storepass="${key}"/>

		<echo message="Packing finished"/>

	</target>
	
	<target name="vars">
		<property name="lp.version.full"      value="${lp.version}.${BUILD_NUMBER}"/>
	</target>
	
	<target name="vars-dev">
		<property name="lp.version.full"      value="${lp.version}.dev.${BUILD_NUMBER}"/>
	</target>
	
	<target name="vars-test">
		<property name="lp.version.full" value="0.0.0.0"/>
		<property name="DEBUG"           value="true"/>
	</target>
	
	<target name="main" depends="vars, init-msg, clean, setup, package-simple"/>
	
	<target name="ci-dev" depends="vars-dev, init-msg, clean, setup, package-sign"/>
	
	<target name="ci" depends="vars, init-msg, clean, setup, package-sign"/>
	
	<target name="test" depends="vars-test, init-msg, clean, setup, compile"/>
	
</project>
